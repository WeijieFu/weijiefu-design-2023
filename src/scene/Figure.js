/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react"
import { gsap } from "gsap"
import { useFrame } from "@react-three/fiber"
import { useGLTF, useMatcapTexture } from "@react-three/drei"
import { TEXTURE_1, TEXTURE_2, TEXTURE } from "../../constants/texture.js"

import useCameraStore from "../../state/camera.js"
import useNavStore from "../../state/navigation.js"
import {
  POSITION_INIT,
  POSITION_FRONT_CENTER,
  POSITION_NAV,
} from "../../constants/position"

export default function Figure(props) {
  const nav = useNavStore()
  const cameraState = useCameraStore()
  const { nodes, materials } = useGLTF("/assets/model/figure.glb")
  const [matcap, url] = useMatcapTexture(TEXTURE_1)

  const figure = useRef()
  const eyes = useRef()
  const eyebrow = useRef()
  const glasses = useRef()
  const group = useRef()

  useEffect(() => {
    const id = setInterval(() => {
      blink()
    }, 4000)

    window.addEventListener("mousemove", handleMouseMove)
    window.addEventListener("touchmove", handleMouseMove)
    return () => {
      clearInterval(id)
      window.removeEventListener("mousemove", handleMouseMove)
      window.removeEventListener("touchmove", handleMouseMove)
    }
  }, [])

  useEffect(() => {
    if (cameraState.position == POSITION_FRONT_CENTER) {
      gsap.to(figure.current.position, {
        x: 0,
        y: -1,
        z: 0,
        duration: 1,
        ease: "power2.out",
      })
    }
    if (cameraState.position == POSITION_NAV) {
      gsap.to(figure.current.position, {
        x: -2.3,
        y: -1.3,
        z: 0,
        duration: 1,
        ease: "power2.out",
      })
    }
  }, [cameraState.position])

  const handleMouseMove = (e) => {
    const state = { pointer: {} }
    state.pointer.x = (e.clientX - window.innerWidth * 0.5) / window.innerWidth
    state.pointer.y =
      -(e.clientY - window.innerHeight * 0.5) / window.innerHeight
    figure.current.rotation.y = 0.1 * state.pointer.x
    figure.current.rotation.x = -0.025 * state.pointer.y
    eyes.current.rotation.y = 0.2 * state.pointer.x
    eyes.current.position.y = 0.02 * state.pointer.y + 0.33
    eyebrow.current.position.y = 0.02 * state.pointer.y
  }

  const blink = () => {
    gsap.to(eyes.current.scale, { y: 0.5, duration: 0.1 })
    gsap.to(eyes.current.scale, { y: 1, duration: 0.1, delay: 0.1 })
  }

  useEffect(() => {
    if (nav.current === "creativecoding") {
      gsap.to(glasses.current.position, {
        z: 1,
        y: 1,
        duration: 0.5,
        ease: "power2.out",
      })
    } else {
      gsap.to(glasses.current.position, {
        y: 0,
        z: 0,
        duration: 0.5,
        ease: "power2.out",
      })
    }
  }, [nav.current])

  return (
    <group {...props} dispose={null} ref={figure}>
      <group ref={group}>
        <mesh geometry={nodes.Ear.geometry}>
          <meshMatcapMaterial matcap={matcap} />
        </mesh>
        <mesh geometry={nodes.Eye.geometry} ref={eyes}>
          <meshMatcapMaterial matcap={matcap} />
        </mesh>
        <mesh geometry={nodes.EyeBrow.geometry} ref={eyebrow}>
          <meshMatcapMaterial matcap={matcap} />
        </mesh>
        <mesh geometry={nodes.Glasses.geometry} ref={glasses}>
          <meshMatcapMaterial matcap={matcap} />
        </mesh>
        <mesh geometry={nodes.Hair.geometry}>
          <meshMatcapMaterial matcap={matcap} />
        </mesh>
        <mesh geometry={nodes.Head.geometry}>
          <meshMatcapMaterial matcap={matcap} />
        </mesh>
        <mesh geometry={nodes.EarRing.geometry}>
          <meshMatcapMaterial matcap={matcap} />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload("/assets/model/figure.glb")
