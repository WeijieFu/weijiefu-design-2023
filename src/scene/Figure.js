/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react"
import { gsap } from "gsap"
import { useFrame } from "@react-three/fiber"
import { useGLTF, useMatcapTexture } from "@react-three/drei"

export default function Figure(props) {
  const { nodes, materials } = useGLTF("/assets/model/figure.glb")
  // const [matcap, url] = useMatcapTexture("2A6276_041218_739BA6_042941")
  const [matcap, url] = useMatcapTexture("537387_75BBB9_152E5B_0E85E8")
  const figure = useRef()
  const eyes = useRef()
  const eyebrow = useRef()
  useFrame((state) => {
    const time = state.clock.elapsedTime
    // figure.current.position.y = -1 + Math.sin(time) * 0.1
    figure.current.rotation.y = 0.025 * state.pointer.x
    figure.current.rotation.x = -0.025 * state.pointer.y
    eyes.current.rotation.y = 0.05 * state.pointer.x
    eyes.current.position.y = 0.02 * state.pointer.y + 0.33
    eyebrow.current.position.y = 0.005 * state.pointer.y
  })
  useEffect(() => {
    const id = setInterval(() => {
      blink()
    }, 4000)
    return () => {
      clearInterval(id)
    }
  }, [])

  const blink = () => {
    gsap.to(eyes.current.scale, { y: 0.5, duration: 0.1 })
    gsap.to(eyes.current.scale, { y: 1, duration: 0.1, delay: 0.1 })
  }
  return (
    <group {...props} dispose={null} ref={figure}>
      <mesh geometry={nodes.Ear.geometry}>
        <meshMatcapMaterial matcap={matcap} />
      </mesh>
      <mesh geometry={nodes.Eye.geometry} ref={eyes}>
        <meshMatcapMaterial matcap={matcap} />
      </mesh>
      <mesh geometry={nodes.EyeBrow.geometry} ref={eyebrow}>
        <meshMatcapMaterial matcap={matcap} />
      </mesh>
      <mesh geometry={nodes.Glasses.geometry}>
        <meshMatcapMaterial matcap={matcap} />
      </mesh>
      <mesh geometry={nodes.Hair.geometry}>
        <meshMatcapMaterial matcap={matcap} />
      </mesh>
      <mesh geometry={nodes.Head.geometry}>
        <meshMatcapMaterial matcap={matcap} />
      </mesh>
      <mesh geometry={nodes.EarRing.geometry}>
        <meshMatcapMaterial matcap={matcap} />
      </mesh>
    </group>
  )
}

useGLTF.preload("/assets/model/figure.glb")
